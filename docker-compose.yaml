version: "3.9"

services:
  backend:
    container_name: fastAPI
    build: ./
    # command: uvicorn Application.main:app --reload --workers 4 --host 0.0.0.0 --port 8000
    volumes:
      - ./SQLDatabase/init:/docker-entrypoint-initdb.d
    ports:
      - "8000:8000"
    env_file:
      - SQLDatabase/DB.env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localHost:5432/${POSTGRES_DB}"
    depends_on:
      - db

  frontend:
    container_name: vue
    build:
      context: ./Frontend
      dockerfile: ./Dockerfile
    volumes:
      - '/Frontend:/Frontend'
    ports:
      - "8080:8080"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  nginx:
    build:
      context: ./Nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  db:
   build:
    context: SQLDatabase
   container_name: postgres
   env_file:
     - SQLDatabase/DB.env
   volumes:
     - postgres_data:/var/lib/postgresql/data/
     - ./SQLDatabase/data:/var/lib/postgresql/data
   environment:
     - POSTGRES_USER="${POSTGRES_USER}"
     - POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
     - POSTGRES_DB="${POSTGRES_DB}"
   ports:
    - "5432:5432"
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_USER}"]
     interval: 10s
     timeout: 5s
     retries: 5
     start_period: 10s
   restart: unless-stopped
   deploy:
     resources:
       limits:
         cpus: '1'
         memory: 4G

  prometheus:
    build:
      context: PrometheusData
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./PrometheusData:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus_data/prometheus.yaml'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./GrafanaData:/var/lib/grafana

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./PrometheusData

  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./GrafanaData
  postgres_data:
  data:
  Frontend:

networks:
  default:
    name: fastapi
